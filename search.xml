<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>九、将具有相同属性的对象合并到一个数组中</title>
      <link href="/2020/01/01/%E5%B1%9E%E6%80%A7%E5%90%88%E5%B9%B6/"/>
      <url>/2020/01/01/%E5%B1%9E%E6%80%A7%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="将具有相同属性的对象合并到一个数组中"><a href="#将具有相同属性的对象合并到一个数组中" class="headerlink" title="将具有相同属性的对象合并到一个数组中"></a>将具有相同属性的对象合并到一个数组中</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'group_name'</span>:<span class="string">'A'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'apple'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'group_name'</span>:<span class="string">'A'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'almond'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'group_name'</span>:<span class="string">'B'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'banana'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'group_name'</span>:<span class="string">'B'</span>,</span><br><span class="line">        <span class="string">'type'</span>: <span class="string">'bennet'</span></span><br><span class="line">    &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码实现</span></span><br><span class="line"><span class="keyword">const</span> res = data.reduce( (prv, &#123; group_name, type &#125; ) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> exist = prv.find(item =&gt; item.group_name == group_name);</span><br><span class="line">    <span class="keyword">if</span> (exist) &#123;</span><br><span class="line">        exist[<span class="string">"data"</span>].push(&#123;</span><br><span class="line">            group_name:group_name,</span><br><span class="line">            type:type</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        prv.push(&#123; group_name, data: [&#123;</span><br><span class="line">            group_name:group_name,</span><br><span class="line">            type:type</span><br><span class="line">        &#125;]&#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> prv;</span><br><span class="line">&#125;, []);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果如下：</span></span><br><span class="line">[</span><br><span class="line">    &#123;  </span><br><span class="line">       <span class="string">'group_name'</span>:A,</span><br><span class="line">        data:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'group_name'</span>:<span class="string">'A'</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'apple'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'group_name'</span>:<span class="string">'A'</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'almond'</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;  </span><br><span class="line">        <span class="string">'group_name'</span>:B,</span><br><span class="line">         data:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'group_name'</span>:<span class="string">'B'</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'banana'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">'group_name'</span>:<span class="string">'B'</span>,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'bennet'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> reduce </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八、扁平化数组</title>
      <link href="/2019/12/30/%E6%89%81%E5%B9%B3%E5%8C%96%E6%95%B0%E7%BB%84/"/>
      <url>/2019/12/30/%E6%89%81%E5%B9%B3%E5%8C%96%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="一：Array-prototype-flat"><a href="#一：Array-prototype-flat" class="headerlink" title="一：Array.prototype.flat()"></a>一：Array.prototype.flat()</h2><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,[<span class="number">7</span>,<span class="number">8</span>]],<span class="number">9</span>,<span class="number">10</span>];</span><br><span class="line"><span class="comment">// 不传参数时，默认“拉平”一层</span></span><br><span class="line">arr.flat();</span><br><span class="line"><span class="comment">// // [1, 2, 3, 4, 5, 6, [7,8], 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入一个整数参数，整数即“拉平”的层数</span></span><br><span class="line">arr.flat(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Infinity 关键字作为参数时，无论多少层嵌套，都会转为一维数组</span></span><br><span class="line"><span class="comment">// Infinity(无穷大)在 JS 中是一个特殊的数字，它的特性是：它比任何有限的数字都大。</span></span><br><span class="line">arr.flat(<span class="literal">Infinity</span>);</span><br><span class="line"> <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入 &lt;=0 的整数将返回原数组，不“拉平”</span></span><br><span class="line">arr.flat(<span class="number">0</span>);</span><br><span class="line">arr.flat(-<span class="number">10</span>);</span><br><span class="line"> <span class="comment">// [1,2,3,[4,5,6,[7,8]],9,10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果原数组有空位，flat()方法会过滤空位</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,,].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h2 id="二：其他方法实现"><a href="#二：其他方法实现" class="headerlink" title="二：其他方法实现"></a>二：其他方法实现</h2><h3 id="1-reduce"><a href="#1-reduce" class="headerlink" title="1.reduce"></a>1.reduce</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> flat = (arr) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.reduce((prv,cur) =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Array</span>.isArray(cur) ? prv.concat(flat(cur)) : prv.concat(cur) </span><br><span class="line">    &#125;,[])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用栈的思想实现-flat-函数"><a href="#2-使用栈的思想实现-flat-函数" class="headerlink" title="2.使用栈的思想实现 flat 函数"></a>2.使用栈的思想实现 flat 函数</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const flat = (arr) =&gt; &#123;</span><br><span class="line">    const stack = [...arr];</span><br><span class="line">    const res = [];</span><br><span class="line">    <span class="keyword">while</span>( stack.length )&#123;</span><br><span class="line">        const next = stack.pop();</span><br><span class="line">        <span class="keyword">if</span>(Array.isArray(next))&#123;</span><br><span class="line">            stack.push(...next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            res.push(next)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">return</span> res.reverse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-通过传入整数参数控制“拉平”层数"><a href="#3-通过传入整数参数控制“拉平”层数" class="headerlink" title="3.通过传入整数参数控制“拉平”层数"></a>3.通过传入整数参数控制“拉平”层数</h3> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const flat = (arr, num = <span class="number">1</span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">return</span> num &gt; <span class="number">0</span> ?</span><br><span class="line">        arr.reduce(</span><br><span class="line">        (pre, cur) =&gt; pre.concat(Array.isArray(cur) ? flat(cur, num - <span class="number">1</span>) : cur),[])</span><br><span class="line">    :</span><br><span class="line">    arr.slice()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#const arr = [1,2,3,[1,2,3,4, [2,3,4]]];</span></span><br><span class="line"><span class="comment">#flat(arr,Infinity)</span></span><br></pre></td></tr></table></figure><p><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="external">MDN参考链接</a></p><p><a href="https://juejin.im/post/5dff18a4e51d455804256d31" target="_blank" rel="external">其他参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> flat </tag>
            
            <tag> 扁平化数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>七、不刷新修改url链接</title>
      <link href="/2019/12/25/%E4%B8%8D%E5%88%B7%E6%96%B0%E4%BF%AE%E6%94%B9url%E9%93%BE%E6%8E%A5/"/>
      <url>/2019/12/25/%E4%B8%8D%E5%88%B7%E6%96%B0%E4%BF%AE%E6%94%B9url%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>有一个这样的需求，点击分页，不刷新页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//我们的page参数是记录在url里的： https://xxx.html?page=1</span></span><br><span class="line"><span class="comment">//如果采取硬拼接的方式，无疑会刷新页面</span></span><br><span class="line"><span class="built_in">window</span>.location.href = <span class="built_in">window</span>.location.pathname + <span class="string">`?page=<span class="subst">$&#123;page&#125;</span>`</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="1-pushState-方法"><a href="#1-pushState-方法" class="headerlink" title="1.pushState() 方法"></a>1.pushState() 方法</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History_API" target="_blank" rel="external">MDN链接</a><br>一个状态对象, 一个标题 (目前被忽略), 和 (可选的) 一个URL. 让我们来解释下这三个参数详细内容：：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- 状态对象 — 状态对象state是一个JavaScript对象，通过pushState () 创建新的历史记录条目。无论什么时候用户导航到新的状态，popstate事件就会被触发，且该事件的state属性包含该历史记录条目状态对象的副本</span><br><span class="line">- 标题 — Firefox 目前忽略这个参数，但未来可能会用到。在此处传一个空字符串应该可以安全的防范未来这个方法的更改。或者，你可以为跳转的state传递一个短标题</span><br><span class="line">- URL — 该参数定义了新的历史URL记录。注意，调用 pushState() 后浏览器并不会立即加载这个URL，但可能会在稍后某些情况下加载这个URL，比如在用户重新打开浏览器时。新URL不必须为绝对路径。如果新URL是相对路径，那么它将被作为相对于当前URL处理。新URL必须与当前URL同源，否则 pushState() 会抛出一个异常。该参数是可选的，缺省为当前URL</span><br></pre></td></tr></table></figure><h2 id="2-pushState使用"><a href="#2-pushState使用" class="headerlink" title="2.pushState使用"></a>2.pushState使用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pageSize = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;window.location.pathname&#125;</span>?page=<span class="subst">$&#123;pageSize&#125;</span>`</span></span><br><span class="line"><span class="built_in">window</span>.history.pushState(&#123;url: url&#125;, <span class="string">''</span>, url);</span><br></pre></td></tr></table></figure><p>以上就能实现页面无刷新修改url链接。</p><p>顺便放上获取和修改url的函数：</p><h2 id="3-获取和修改url的函数："><a href="#3-获取和修改url的函数：" class="headerlink" title="3.获取和修改url的函数："></a>3.获取和修改url的函数：</h2><h3 id="获取url参数"><a href="#获取url参数" class="headerlink" title="获取url参数"></a>获取url参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParams</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line">    <span class="keyword">let</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="更改url参数"><a href="#更改url参数" class="headerlink" title="更改url参数"></a>更改url参数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceParamVal</span>(<span class="params">paramName,replaceWith</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oUrl = <span class="built_in">window</span>.location.href.toString();</span><br><span class="line">    <span class="keyword">var</span> re = evil(<span class="string">'/('</span>+ paramName+<span class="string">'=)([^&amp;]*)/gi'</span>);</span><br><span class="line">    <span class="keyword">var</span> nUrl = oUrl.replace(re,paramName+<span class="string">'='</span>+replaceWith);</span><br><span class="line">    <span class="keyword">this</span>.location = nUrl;</span><br><span class="line">    <span class="built_in">window</span>.location.href=nUrl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Fn = <span class="built_in">Function</span>; <span class="comment">//一个变量指向Function，防止有些前端编译工具报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Fn(<span class="string">'return '</span> + fn)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> pushState </tag>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>六、函数节流和防抖</title>
      <link href="/2019/12/23/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/"/>
      <url>/2019/12/23/%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81%E5%92%8C%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<h2 id="1-节流"><a href="#1-节流" class="headerlink" title="1.节流"></a>1.节流</h2><p>核心思想: 如果在定时器的时间范围内再次触发，则不予理睬，等当前定时器完成，才能启动下一个定时器任务。</p><a id="more"></a> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> throttle = (fn, delay) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> (...args) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (!flag) <span class="keyword">return</span>;</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        setTimeout(() =&gt; &#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="2-防抖"><a href="#2-防抖" class="headerlink" title="2.防抖"></a>2.防抖</h2><p> 核心思想: 每次事件触发都删除原来的定时器，建立新的定时器，反复触发函数，那么从最后一次触发开始计时。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = (fn, delay) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span>  (...args) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;  </span><br><span class="line">            clearTimeout(timer)</span><br><span class="line">        &#125;;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-合并"><a href="#3-合并" class="headerlink" title="3.合并"></a>3.合并</h2><p> 现在我们可以把防抖和节流放到一起，有时候触发的太频繁会导致一次响应都没有，我们希望到了固定的时间必须给用户一个响应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span>  throttle = (fn, delay) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> flag = <span class="literal">true</span>, timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>( !flag )&#123; <span class="keyword">return</span> &#125;;  </span><br><span class="line">        clearTimeout(timer);</span><br><span class="line">        flag = <span class="literal">false</span>;</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            flag = <span class="literal">true</span>;</span><br><span class="line">            fn.apply(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实践-–-图片懒加载"><a href="#4-实践-–-图片懒加载" class="headerlink" title="4.实践 – 图片懒加载"></a>4.实践 – 图片懒加载</h2><h3 id="clientHeight-、scrollTop-、-offsetTop"><a href="#clientHeight-、scrollTop-、-offsetTop" class="headerlink" title="clientHeight 、scrollTop 、 offsetTop"></a>clientHeight 、scrollTop 、 offsetTop</h3><p>思路： 给img一个默认图片，以及data-src属性，当页面滚动到对应img元素的时候，把data-src赋值给src。<br> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//给img一个默认图片</span><br><span class="line">&lt;img src="default.png" data-src="xxx/img.png" /&gt;</span><br><span class="line"></span><br><span class="line">//通过监听 scroll 事件来判断图片是否到达视口:</span><br><span class="line">let img = document.getElementsByTagName("img");</span><br><span class="line">let num = img.length;</span><br><span class="line">let count = 0; #计数器，从第一张图片开始计</span><br><span class="line"></span><br><span class="line">lazyload(); #首次加载</span><br><span class="line"></span><br><span class="line">window.addEventListener('scroll', throttle(lazyload, 200)); //节流</span><br><span class="line"></span><br><span class="line">function lazyload() &#123;</span><br><span class="line">    let viewHeight = document.documentElement.clientHeight;#视口高度</span><br><span class="line">    let scrollTop = document.documentElement.scrollTop || document.body.scrollTop;#滚动条滚动的高度</span><br><span class="line">    for(let i = count; i &lt; num; i++) &#123;</span><br><span class="line">        //元素现在已经出现在视口中</span><br><span class="line">        if( img[i].offsetTop &lt; scrollHeight + viewHeight ) &#123;</span><br><span class="line">            if(img[i].getAttribute('src') !== 'default.png') continue; #如果src不是default.png'，跳过循环，继续往下循环</span><br><span class="line">            img[i].src = img[i].getAttribute("data-src");</span><br><span class="line">            count ++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//scrollTop + clientHeight === scrollHeight 即触发下拉加载的条件</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
        <tags>
            
            <tag> 函数 </tag>
            
            <tag> 节流/防抖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五、js 深拷贝与浅拷贝</title>
      <link href="/2019/12/18/js%20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>/2019/12/18/js%20%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本数据类型和引用数据类型"><a href="#1-基本数据类型和引用数据类型" class="headerlink" title="1.基本数据类型和引用数据类型"></a>1.基本数据类型和引用数据类型</h2><p> 数据分为基本数据类型和引用数据类型</p><p> 基本数据类型:</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>、<span class="built_in">Number</span>、<span class="built_in">Boolean</span>、Null、Undefined、<span class="built_in">Symbol</span>、BigInt(?)</span><br></pre></td></tr></table></figure><p> 引用数据类型:</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>、<span class="built_in">Object</span></span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="2-概念"><a href="#2-概念" class="headerlink" title="2.概念"></a>2.概念</h2><p> 浅拷贝：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">仅仅复制对象的引用，而不是对象本身</span><br></pre></td></tr></table></figure><p> 深拷贝：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">把复制的对象所引用的全部对象都复制一遍</span><br></pre></td></tr></table></figure><p>简单来说，浅拷贝就是这个人的影子，深拷贝就是复制了这个人。</p><h2 id="3-方法"><a href="#3-方法" class="headerlink" title="3.方法"></a>3.方法</h2><h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shallowClone = (obj) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj.hasOwnProperty(i)) &#123;</span><br><span class="line">            result[i] = obj[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Object的 hasOwnProperty()方法返回一个布尔值，判断对象是否包含特定的自身（非继承）属性。hasOwnProperty()方法来忽略继承属性.</span></span><br><span class="line"><span class="comment">//object.assign() 把任意多个的源对象自身的可枚举属性拷贝给目标对象，然后返回目标对象</span></span><br><span class="line"><span class="comment">//Array.prototype.concat() 数组的一个内置方法，用户合并两个或者多个数组，不会改变现有数组，而是返回一个新数组</span></span><br><span class="line"><span class="comment">//Array.prototype.slice() 数组的一个内置方法，该方法会返回一个新的对象，不会改变原数组 </span></span><br><span class="line"><span class="comment">//obj展开运算符 [...]</span></span><br><span class="line"><span class="comment">//以上几种方式也可以</span></span><br></pre></td></tr></table></figure><h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const deepClone = (obj) =&gt; &#123;</span><br><span class="line">    let result = Array.isArray(obj) ? [] : &#123;&#125;;</span><br><span class="line">    for( let i in obj )&#123;</span><br><span class="line">        if( obj.hasOwnProperty(i) )&#123;</span><br><span class="line">            if( typeof obj[i] === 'object' &amp;&amp;  obj[i] !== null)&#123;</span><br><span class="line">                result[i] = deepClone(obj[i]) #递归复制</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                result[i] = obj[i]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line">//Object的hasOwnProperty()方法返回一个布尔值，判断对象是否包含特定的自身（非继承）属性。hasOwnProperty()方法来忽略继承属性</span><br></pre></td></tr></table></figure><p> JSON.stringfy()和JSON.parse()会忽略undefined、function、symbol，导致属性丢失。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> 小技巧 </tag>
            
            <tag> 拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>四、react &amp; html2canvas 生成图片下载实践</title>
      <link href="/2019/12/16/react%20&amp;%20html2canvas%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/12/16/react%20&amp;%20html2canvas%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="html2canvas的选择"><a href="#html2canvas的选择" class="headerlink" title="html2canvas的选择"></a>html2canvas的选择</h2><p>现在一般生成图片有前端处理和后端处理两种方式，后端生成的方案不需要前端出力，只需要拿路径渲染，但是会出现数据延时，模板更换困难等问题，出于灵活性和减少后端工作量考虑，我们采取 html2canvas  绘制页面。</p><p> <a href="https://www.npmjs.com/package/html2canvas" target="_blank" rel="external">html2canvas npm</a><br> <a href="http://html2canvas.hertzen.com/" target="_blank" rel="external">html2canvas 介绍</a></p> <a id="more"></a><h3 id="1-在react中的使用"><a href="#1-在react中的使用" class="headerlink" title="1.在react中的使用"></a>1.在react中的使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">npm install --save html2canvas</span><br><span class="line">or</span><br><span class="line">yarn add html2canvas</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> html2canvas <span class="keyword">from</span> <span class="string">'html2canvas'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">html2canvas(<span class="built_in">document</span>.body).then(<span class="function"><span class="keyword">function</span>(<span class="params">canvas</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(canvas);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果想生成一部分页面的话，html2canvas可以换成 this.refs.demo</span></span><br><span class="line"><span class="comment">//&lt;div ref="demo"&gt;&lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>上面就会把页面简单的绘制出来。</p><h2 id="2-canvas-下载"><a href="#2-canvas-下载" class="headerlink" title="2.canvas 下载"></a>2.canvas 下载</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">html2canvas(this.refs.demo).then(function(canvas) &#123;</span><br><span class="line">    const imgUrl = canvas.toDataURL("image/png"); # 获取图片的url</span><br><span class="line">    const elA = document.createElement("a");</span><br><span class="line">    elA.download = +new Date() + ".png";</span><br><span class="line">    elA.href = imgUrl ;</span><br><span class="line">    elA.click();</span><br><span class="line">    elA.remove();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//微信中不能下载图片，可以展示图片并提示用户长按保存图片</span><br></pre></td></tr></table></figure><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3.参考"></a>3.参考</h2><p> <a href="https://juejin.im/post/5df2e8ab6fb9a0163770816d" target="_blank" rel="external">参考1</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> html2canvas </tag>
            
            <tag> js </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三、一些自己在使用css、js技巧</title>
      <link href="/2019/12/12/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E5%9C%A8%E4%BD%BF%E7%94%A8css%E3%80%81js%E6%8A%80%E5%B7%A7/"/>
      <url>/2019/12/12/%E4%B8%80%E4%BA%9B%E8%87%AA%E5%B7%B1%E5%9C%A8%E4%BD%BF%E7%94%A8css%E3%80%81js%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><a id="more"></a><p>1.省略：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单行省略</span></span><br><span class="line">width: <span class="number">100</span>px;</span><br><span class="line">white-space: nowrap;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">overflow: hidden;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多行省略</span></span><br><span class="line">width: <span class="number">100</span>px;</span><br><span class="line">height:<span class="number">50</span>px;</span><br><span class="line">line-height: <span class="number">30</span>px;</span><br><span class="line">overflow: hidden;</span><br><span class="line">text-overflow: ellipsis;</span><br><span class="line">display: -webkit-box;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>;  <span class="comment">//块元素显示的文本的行数。</span></span><br><span class="line">-webkit-box-orient: vertical;</span><br></pre></td></tr></table></figure><p>2.下箭头<br><img src="/images/two.png" alt></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">width: 7px;</span><br><span class="line">height: 7px;</span><br><span class="line">border-bottom: 2px solid #bdbdbd;</span><br><span class="line">border-right: 2px solid #bdbdbd;</span><br><span class="line">transform: rotate(45deg);</span><br></pre></td></tr></table></figure><p>3.更换谷歌滚动条样式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-scrollbar-thumb&#123;&#125;    <span class="comment">//更改谷歌滚动条样式</span></span><br><span class="line">::-webkit-scrollbar&#123;&#125;   <span class="comment">//更改谷歌滚动条背景样式</span></span><br></pre></td></tr></table></figure><p>4.改变placeholder的颜色</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">::-moz-placeholder &#123; color: #CDCDCD; &#125;</span><br><span class="line">::-webkit-input-placeholder &#123; color:#CDCDCD; &#125;</span><br><span class="line">:-ms-input-placeholder &#123; color:#CDCDCD; &#125;</span><br></pre></td></tr></table></figure><p>5.阴影：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//左</span><br><span class="line">box-shadow: -7px 0 5px -5px #333;</span><br><span class="line">//右</span><br><span class="line">box-shadow: 7px 0 5px -5px #333;</span><br><span class="line">//上</span><br><span class="line">box-shadow: 0px -7px 5px -5px #333;</span><br><span class="line">//下</span><br><span class="line">box-shadow: 0px 7px 5px -5px #333;</span><br></pre></td></tr></table></figure><p><img src="/images/three.png" alt></p><h2 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h2><p>1.判断 val 是否存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> item <span class="keyword">in</span> data)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!data[item])&#123;</span><br><span class="line">        data[item] = <span class="string">'--'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.上传图片回填</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reads = <span class="keyword">new</span> FileReader();</span><br><span class="line">reads.readAsDataURL(files);</span><br><span class="line">reads.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'ID'</span>).src = <span class="keyword">this</span>.result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>3.获取url参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getParams</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line">    <span class="keyword">let</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.更改url参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">replaceParamVal</span>(<span class="params">paramName,replaceWith</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oUrl = <span class="built_in">window</span>.location.href.toString();</span><br><span class="line">    <span class="keyword">var</span> re = evil(<span class="string">'/('</span>+ paramName+<span class="string">'=)([^&amp;]*)/gi'</span>);</span><br><span class="line">    <span class="keyword">var</span> nUrl = oUrl.replace(re,paramName+<span class="string">'='</span>+replaceWith);</span><br><span class="line">    <span class="keyword">this</span>.location = nUrl;</span><br><span class="line">    <span class="built_in">window</span>.location.href=nUrl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evil</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> Fn = <span class="built_in">Function</span>; <span class="comment">//一个变量指向Function，防止有些前端编译工具报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Fn(<span class="string">'return '</span> + fn)();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.ios window.history.back() 致使 localStorage不同步</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onpageshow = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.persisted) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.reload();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.判断对象是否存在</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> page = &#123;</span><br><span class="line">    user:<span class="string">'111'</span>,</span><br><span class="line">    cityInfo:&#123;</span><br><span class="line">        city:<span class="string">'hz'</span>,</span><br><span class="line">        code:<span class="string">'111'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> name = ( (page || &#123;&#125;).cityInfo || &#123;&#125; ).city || <span class="string">'111'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name)</span><br></pre></td></tr></table></figure><p>7.textatea 高度自适应</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//jq:</span><br><span class="line">el.on('input', function () &#123;</span><br><span class="line">    const height =  $(this).scrollTop() + $(this).prop("scrollHeight") + "px";</span><br><span class="line">    $(this).height(height)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//react :</span><br><span class="line">const el = this.refs.remark;</span><br><span class="line">el.style.height = 'auto';  </span><br><span class="line">if(el.scrollHeight &gt;=el.offsetHeight)&#123;   #如果高度不够，再重新设置</span><br><span class="line">    el.style.height = el.scrollHeight + 'px'</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.查找重复字符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> red= <span class="string">'hjqjbsaxhhhh'</span>; </span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;red.length; i++) &#123; </span><br><span class="line">    obj[red[i]] = ++obj[red[i]] || <span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">console</span>.log(red[i]) </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.安卓键盘置顶按钮(安卓会出现键盘出来,按钮在下面没上来的情况)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">handleSetBtnPosition</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> win_h = $(<span class="built_in">window</span>).height();</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> u = navigator.userAgent;</span><br><span class="line">        <span class="keyword">if</span> (u.indexOf(<span class="string">'Android'</span>) &gt; -<span class="number">1</span> || u.indexOf(<span class="string">'Linux'</span>) &gt; -<span class="number">1</span>) &#123;         </span><br><span class="line">            <span class="keyword">if</span>($(<span class="built_in">window</span>).height() &lt; win_h)&#123;</span><br><span class="line">                $(<span class="string">"#submit_btn"</span>).hide();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                $(<span class="string">"#submit_btn"</span>).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10.自动添加空格</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"13116700755"</span>.replace(<span class="regexp">/(?&lt;=^\d&#123;3&#125;(\d&#123;4&#125;)*)(?!$)/g</span>, <span class="string">' '</span>) ---&gt; <span class="string">"131 1670 0755"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> js </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二、vsCode终端打开问题</title>
      <link href="/2019/12/09/vsCode%E7%BB%88%E7%AB%AF%E6%89%93%E5%BC%80%E9%97%AE%E9%A2%98/"/>
      <url>/2019/12/09/vsCode%E7%BB%88%E7%AB%AF%E6%89%93%E5%BC%80%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>之前打开vscode时，报 终端进程命令”/bin/bash -l”无法启动 (退出代码: 1)；</p><p><img src="/images/one.png" alt></p><a id="more"></a><p>其他报错也可以参考一下：</p><h2 id="有以下几个解决思路"><a href="#有以下几个解决思路" class="headerlink" title="有以下几个解决思路"></a>有以下几个解决思路</h2><p>1.重装vscode；（我是这个方法解决的）</p><p>2.因为 VSCode 工作区的文件夹有变更（删除、移动等），导致 VSCode 打开终端时，找不到此文件夹而报错；</p><p>3.配置下 git 路径不对，重新配置一下git；在设置里修改 “terminal.integrated.shell.windows”: “git路径base.exe”；</p><p>4.用管理员的权限来执行vscode，要不然它没有权限使用cmd;右击快捷键点击属性然后选择以管理员的身份运行</p><ol start="5"><li><a href="https://github.com/Microsoft/vscode/issues/17450" target="_blank" rel="external">github解决思路</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一、React 多页面打包</title>
      <link href="/2019/12/06/react%20%E5%A4%9A%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8C%85/"/>
      <url>/2019/12/06/react%20%E5%A4%9A%E9%A1%B5%E9%9D%A2%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h2><p>之前我们用的是react单页面打包，方便是方便，开包即用。但是因为我们做的是活动页面，一般每次都只有一个页面，不仅要建大量的路由，而且资源冗杂，即使已经做了资源分割。还有做多页面最重要的原因是：单页面打包，会影响所有的页面，如果一个页面报错，那么其他的页面也无法访问。下面开始配置:</p><h3 id="一-webpack及react版本"><a href="#一-webpack及react版本" class="headerlink" title="一.webpack及react版本"></a>一.webpack及react版本</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"webpack"</span>: <span class="string">"^4.19.1"</span>,</span><br><span class="line"><span class="string">"react"</span>: <span class="string">"^16.8.3"</span>,</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="二-文件夹基本构造"><a href="#二-文件夹基本构造" class="headerlink" title="二.文件夹基本构造"></a>二.文件夹基本构造</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">config </span><br><span class="line">    - path.js</span><br><span class="line">    - webpack.config.js</span><br><span class="line">public </span><br><span class="line">    - index.html</span><br><span class="line">src    </span><br><span class="line">    - page </span><br><span class="line">        - home </span><br><span class="line">            - component.js</span><br><span class="line">            - index.js </span><br><span class="line">            - index.less</span><br><span class="line">index.js <span class="comment">//必不可少，可以为空</span></span><br></pre></td></tr></table></figure><!-- More info: [Generating](https://hexo.io/docs/generating.html) --><h3 id="1-page下的index-js"><a href="#1-page下的index-js" class="headerlink" title="1.page下的index.js"></a>1.page下的index.js</h3><p>home是一个单独的页面，包括 </p><p>component.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Home</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</span><br><span class="line">    constructor(props)&#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount()&#123;&#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">                # ...</span><br><span class="line">            <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        )</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Home;</span><br></pre></td></tr></table></figure><p>index.js:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'babel-polyfill'</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./component'</span>;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="title">Home</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><p>index.less是页面相关的样式</p><h3 id="2-config下的path-js"><a href="#2-config下的path-js" class="headerlink" title="2.config下的path.js"></a>2.config下的path.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取page/*/下的所有index</span></span><br><span class="line"><span class="keyword">const</span> globby = <span class="built_in">require</span>(<span class="string">'globby'</span>);</span><br><span class="line"><span class="keyword">const</span> entriesPath = globby.sync([resolveApp(<span class="string">'src/page'</span>) + <span class="string">'/*/index.js'</span>]);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    entriesPath</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面这里是关键，东西有点多，配错了就没效果了：⬇️</p><h3 id="3-config下的webpack-config-js"><a href="#3-config下的webpack-config-js" class="headerlink" title="3.config下的webpack.config.js"></a>3.config下的webpack.config.js</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">// 获取指定路径下的入口文件</span><br><span class="line">function getEntries()&#123;</span><br><span class="line">    const entries = &#123;&#125;;</span><br><span class="line">    const files = paths.entriesPath;</span><br><span class="line">    files.forEach(filePath =&gt; &#123;</span><br><span class="line">        let tmp = filePath.split('/');</span><br><span class="line">        let name = tmp[tmp.length - 2];</span><br><span class="line">        entries[name] = [</span><br><span class="line">            require.resolve('react-dev-utils/webpackHotDevClient'),</span><br><span class="line">            filePath,</span><br><span class="line">        ];</span><br><span class="line">    &#125;);</span><br><span class="line">    return entries;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 入口文件对象</span><br><span class="line">const entries = getEntries();</span><br><span class="line"></span><br><span class="line">// 有多少个页面就new 多少个HtmlWebpackPlugin</span><br><span class="line">const htmlPlugin = Object.keys(entries).map(item =&gt; &#123;</span><br><span class="line">    return new HtmlWebpackPlugin(&#123;</span><br><span class="line">        inject: true,</span><br><span class="line">        template: paths.appHtml, # pulblic/index.html 公共html模板</span><br><span class="line">        filename:  item + '/' + item + '.html', # 这里是关键,访问入口由这里决定 http://localhost:3000/home/home.html</span><br><span class="line">        chunks: [item]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//更换入口</span><br><span class="line">entry: &#123;</span><br><span class="line">    # devtool: isEnvProduction</span><br><span class="line">    # ? shouldUseSourceMap</span><br><span class="line">    #     ? 'source-map'</span><br><span class="line">    #     : false</span><br><span class="line">    # : isEnvDevelopment &amp;&amp; 'eval-source-map',</span><br><span class="line">    entries</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 出口也顺便更改一下</span><br><span class="line">output:&#123;</span><br><span class="line">    #把对应资源放到对应页面下面,这里[name] 就是home</span><br><span class="line">    #isEnvDevelopment 对应的内容一定要配，不然本地开发只能找到一个页面</span><br><span class="line">    #version 是时间戳 const version = +new Date();</span><br><span class="line">    filename: isEnvProduction</span><br><span class="line">    ?    '[name]/static/js/[name].[chunkhash:8].'+version+'.js'</span><br><span class="line">    : isEnvDevelopment &amp;&amp; '[name]/static/js/bundle.js',</span><br><span class="line"></span><br><span class="line">    chunkFilename: isEnvProduction</span><br><span class="line">    ?    '[name]/static/js/[name].[chunkhash:8].'+version+'.chunk.js'</span><br><span class="line">    : isEnvDevelopment &amp;&amp; '[name]/static/js/[name].chunk.'+version+'.js',</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//上面是js，css也改一下，全局搜索 MiniCssExtractPlugin</span><br><span class="line">new MiniCssExtractPlugin(&#123;</span><br><span class="line">    // Options similar to the same options in webpackOptions.output</span><br><span class="line">    // both options are optional</span><br><span class="line">    filename:   '[name]/static/css/[name].[contenthash:8].'+version+'.css',</span><br><span class="line">    chunkFilename:  '[name]/static/css/[name].[contenthash:8].chunk.'+version+'.css',</span><br><span class="line">&#125;),</span><br><span class="line"></span><br><span class="line">// 图片资源 全局搜索 .png ,图片是独立的</span><br><span class="line">&#123;</span><br><span class="line">    test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],</span><br><span class="line">    loader: require.resolve('url-loader')  ,</span><br><span class="line">    options: &#123;</span><br><span class="line">    limit: 10000,</span><br><span class="line">    name: 'static/media/[name].[hash:8].'+version+'.[ext]',</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="4-打包效果"><a href="#4-打包效果" class="headerlink" title="4.打包效果"></a>4.打包效果</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">dist</span><br><span class="line">   - 1  // 打包出的公共的js文件</span><br><span class="line">   - 2  // 打包出的公共的js文件</span><br><span class="line">   - assets #本地静态资源</span><br><span class="line">   - static #打包的静态图片资源</span><br><span class="line">       - media</span><br><span class="line">           - xxxx.png</span><br><span class="line">   - home</span><br><span class="line">       - home.html</span><br><span class="line">       - static</span><br><span class="line">           - css</span><br><span class="line">             - xxx.css</span><br><span class="line">           - js</span><br><span class="line">             - xxx.js</span><br><span class="line">    xxx</span><br></pre></td></tr></table></figure><p>如果多个页面的话，其他页面效果和home文件一样。</p><h3 id="4-最后一点"><a href="#4-最后一点" class="headerlink" title="4.最后一点"></a>4.最后一点</h3><p>打完包，可能会出现资源访问不到，在 package.json 配置一下homepage</p><p>(1).我的是下面，根据项目路径来写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"homepage"</span>: <span class="string">"../"</span>,</span><br></pre></td></tr></table></figure><p>顺便提一下，本地跨域，同样在 package.json 配置一下 proxy就可以了：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"proxy"</span>: <span class="string">"域名"</span>,</span><br></pre></td></tr></table></figure><p>打完包之后，放到服务器上，跳转访问路径也要配置的</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"><span class="comment">//比如本地 </span></span><br><span class="line">http:<span class="comment">//localhost:3000/home/home.html;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//线上:</span></span><br><span class="line">https:www.baidu.com/dist/demo/home/home.html</span><br><span class="line"></span><br><span class="line"><span class="comment">//那么当你跳转链接的时候，就要这样：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//跳转</span></span><br><span class="line"><span class="keyword">const</span> param = <span class="built_in">window</span>.location.href.includes(<span class="string">'baidu'</span>) ? <span class="string">'/dist/demo'</span> : <span class="string">''</span>;</span><br><span class="line"><span class="built_in">window</span>.location.href = param + <span class="string">'/home/home.html'</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> react </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
